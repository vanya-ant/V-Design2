{"ast":null,"code":"import * as i1 from '@angular/fire';\nimport { observeOutsideAngular, keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport { Observable, of, from } from 'rxjs';\nimport { debounceTime, map, switchMap, tap } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, makeStateKey, Pipe, NgModule } from '@angular/core';\nimport * as i2 from '@angular/fire/app-check';\nimport { ɵfirebaseAppFactory as _firebaseAppFactory, ɵcacheInstance as _cacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport 'firebase/compat/storage';\nimport firebase from 'firebase/compat/app';\nimport { AsyncPipe } from '@angular/common';\n\n// need to import, else the types become import('firebase/compat/app').default.storage.UploadTask\n// and it no longer works w/Firebase v7\n// Things aren't working great, I'm having to put in a lot of work-arounds for what\n// appear to be Firebase JS SDK bugs https://github.com/firebase/firebase-js-sdk/issues/4158\nfunction fromTask(task) {\n  return new Observable(subscriber => {\n    const progress = snap => subscriber.next(snap);\n    const error = e => subscriber.error(e);\n    const complete = () => subscriber.complete();\n    // emit the current snapshot, so they don't have to wait for state_changes\n    // to fire next... this is stale if the task is no longer running :(\n    progress(task.snapshot);\n    const unsub = task.on('state_changed', progress);\n    // it turns out that neither task snapshot nor 'state_changed' fire the last\n    // snapshot before completion, the one with status 'success\" and 100% progress\n    // so let's use the promise form of the task for that\n    task.then(snapshot => {\n      progress(snapshot);\n      complete();\n    }, e => {\n      // TODO investigate, again this is stale, we never fire a canceled or error it seems\n      progress(task.snapshot);\n      error(e);\n    });\n    // on's type if Function, rather than () => void, need to wrap\n    return function unsubscribe() {\n      unsub();\n    };\n  }).pipe(\n  // deal with sync emissions from first emitting `task.snapshot`, this makes sure\n  // that if the task is already finished we don't emit the old running state\n  debounceTime(0));\n}\n\n/**\n * Create an AngularFireUploadTask from a regular UploadTask from the Storage SDK.\n * This method creates an observable of the upload and returns on object that provides\n * multiple methods for controlling and monitoring the file upload.\n */\nfunction createUploadTask(task) {\n  const inner$ = fromTask(task);\n  return {\n    task,\n    then: task.then.bind(task),\n    catch: task.catch.bind(task),\n    pause: task.pause.bind(task),\n    cancel: task.cancel.bind(task),\n    resume: task.resume.bind(task),\n    snapshotChanges: () => inner$,\n    percentageChanges: () => inner$.pipe(map(s => s.bytesTransferred / s.totalBytes * 100))\n  };\n}\n\n/**\n * Create an AngularFire wrapped Storage Reference. This object\n * creates observable methods from promise based methods.\n */\nfunction createStorageRef(ref) {\n  return {\n    getDownloadURL: () => of(undefined).pipe(observeOutsideAngular, switchMap(() => ref.getDownloadURL()), keepUnstableUntilFirst),\n    getMetadata: () => of(undefined).pipe(observeOutsideAngular, switchMap(() => ref.getMetadata()), keepUnstableUntilFirst),\n    delete: () => from(ref.delete()),\n    child: path => createStorageRef(ref.child(path)),\n    updateMetadata: meta => from(ref.updateMetadata(meta)),\n    put: (data, metadata) => {\n      const task = ref.put(data, metadata);\n      return createUploadTask(task);\n    },\n    putString: (data, format, metadata) => {\n      const task = ref.putString(data, format, metadata);\n      return createUploadTask(task);\n    },\n    list: options => from(ref.list(options)),\n    listAll: () => from(ref.listAll())\n  };\n}\nconst BUCKET = /*#__PURE__*/new InjectionToken('angularfire2.storageBucket');\nconst MAX_UPLOAD_RETRY_TIME = /*#__PURE__*/new InjectionToken('angularfire2.storage.maxUploadRetryTime');\nconst MAX_OPERATION_RETRY_TIME = /*#__PURE__*/new InjectionToken('angularfire2.storage.maxOperationRetryTime');\nconst USE_EMULATOR = /*#__PURE__*/new InjectionToken('angularfire2.storage.use-emulator');\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\nlet AngularFireStorage = /*#__PURE__*/(() => {\n  class AngularFireStorage {\n    storage;\n    constructor(options, name, storageBucket,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, zone, schedulers, maxUploadRetryTime, maxOperationRetryTime, _useEmulator, _appCheckInstances) {\n      const app = _firebaseAppFactory(options, zone, name);\n      this.storage = _cacheInstance(`${app.name}.storage.${storageBucket}`, 'AngularFireStorage', app.name, () => {\n        const storage = zone.runOutsideAngular(() => app.storage(storageBucket || undefined));\n        const useEmulator = _useEmulator;\n        if (useEmulator) {\n          storage.useEmulator(...useEmulator);\n        }\n        if (maxUploadRetryTime) {\n          storage.setMaxUploadRetryTime(maxUploadRetryTime);\n        }\n        if (maxOperationRetryTime) {\n          storage.setMaxOperationRetryTime(maxOperationRetryTime);\n        }\n        return storage;\n      }, [maxUploadRetryTime, maxOperationRetryTime]);\n    }\n    ref(path) {\n      return createStorageRef(this.storage.ref(path));\n    }\n    refFromURL(path) {\n      return createStorageRef(this.storage.refFromURL(path));\n    }\n    upload(path, data, metadata) {\n      const storageRef = this.storage.ref(path);\n      const ref = createStorageRef(storageRef);\n      return ref.put(data, metadata);\n    }\n    static ɵfac = function AngularFireStorage_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AngularFireStorage)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(BUCKET, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(MAX_UPLOAD_RETRY_TIME, 8), i0.ɵɵinject(MAX_OPERATION_RETRY_TIME, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AppCheckInstances, 8));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: AngularFireStorage,\n      factory: AngularFireStorage.ɵfac,\n      providedIn: 'any'\n    });\n  }\n  return AngularFireStorage;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** to be used with in combination with | async */\nlet GetDownloadURLPipe = /*#__PURE__*/(() => {\n  class GetDownloadURLPipe {\n    storage;\n    state;\n    asyncPipe;\n    path;\n    downloadUrl$;\n    constructor(storage, cdr, state) {\n      this.storage = storage;\n      this.state = state;\n      this.asyncPipe = new AsyncPipe(cdr);\n    }\n    transform(path) {\n      if (path !== this.path) {\n        this.path = path;\n        const key = makeStateKey(`|getDownloadURL|${path}`);\n        const existing = this.state?.get(key, undefined);\n        this.downloadUrl$ = existing ? of(existing) : this.storage.ref(path).getDownloadURL().pipe(tap(it => this.state?.set(key, it)));\n      }\n      return this.asyncPipe.transform(this.downloadUrl$);\n    }\n    ngOnDestroy() {\n      this.asyncPipe.ngOnDestroy();\n    }\n    static ɵfac = function GetDownloadURLPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || GetDownloadURLPipe)(i0.ɵɵdirectiveInject(AngularFireStorage, 16), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16), i0.ɵɵdirectiveInject(i0.TransferState, 24));\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"getDownloadURL\",\n      type: GetDownloadURLPipe,\n      pure: false,\n      standalone: false\n    });\n  }\n  return GetDownloadURLPipe;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet GetDownloadURLPipeModule = /*#__PURE__*/(() => {\n  class GetDownloadURLPipeModule {\n    static ɵfac = function GetDownloadURLPipeModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || GetDownloadURLPipeModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: GetDownloadURLPipeModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return GetDownloadURLPipeModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AngularFireStorageModule = /*#__PURE__*/(() => {\n  class AngularFireStorageModule {\n    constructor() {\n      firebase.registerVersion('angularfire', VERSION.full, 'gcs-compat');\n    }\n    static ɵfac = function AngularFireStorageModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AngularFireStorageModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: AngularFireStorageModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [AngularFireStorage],\n      imports: [GetDownloadURLPipeModule]\n    });\n  }\n  return AngularFireStorageModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireStorage, AngularFireStorageModule, BUCKET, GetDownloadURLPipe, GetDownloadURLPipeModule, MAX_OPERATION_RETRY_TIME, MAX_UPLOAD_RETRY_TIME, USE_EMULATOR, createStorageRef, createUploadTask, fromTask };\n//# sourceMappingURL=angular-fire-compat-storage.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}